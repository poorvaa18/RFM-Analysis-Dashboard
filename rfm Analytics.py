# -*- coding: utf-8 -*-
"""RFM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FN9hO3S5Blo1T-H3fzorB_PE3nkJD2uo

# RFM Analysis Dashboard
"""

import pandas as pd
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
pio.templates.default = "plotly_white"

data = pd.read_csv("rfm_data.csv")
print(data.head())

from datetime import datetime

# Convert 'PurchaseDate' to datetime
data['PurchaseDate'] = pd.to_datetime(data['PurchaseDate'])

data

"""## Calculating the Recency, Frequency, and Monetary values

### Recency
By calculating the difference between the current date and the purchase date, you create a metric that represents the recency of each purchase.
"""

data['Recency'] = (datetime.now().date() - data['PurchaseDate'].dt.date).dt.days
data

# Calculate Frequency
frequency_data = data.groupby('CustomerID')['OrderID'].count().reset_index()
frequency_data.rename(columns={'OrderID': 'Frequency'}, inplace=True)
data = data.merge(frequency_data, on='CustomerID', how='left')
data

# Calculate Monetary Value
monetary_data = data.groupby('CustomerID')['TransactionAmount'].sum().reset_index()
monetary_data.rename(columns={'TransactionAmount': 'MonetaryValue'}, inplace=True)
data = data.merge(monetary_data, on='CustomerID', how='left')

data

recency_scores = [5, 4, 3, 2, 1]  # Higher score for lower recency (more recent)
frequency_scores = [1, 2, 3, 4, 5]  # Higher score for higher frequency
monetary_scores = [1, 2, 3, 4, 5]  # Higher score for higher monetary value

# Calculate RFM scores
data['RecencyScore'] = pd.cut(data['Recency'], bins=5, labels=recency_scores)
data['FrequencyScore'] = pd.cut(data['Frequency'], bins=5, labels=frequency_scores)
data['MonetaryScore'] = pd.cut(data['MonetaryValue'], bins=5,labels= monetary_scores)

data

data.info()

# Convert RFM scores(category) to numeric type
data['RecencyScore'] = data['RecencyScore'].astype(int)
data['FrequencyScore'] = data['FrequencyScore'].astype(int)
data['MonetaryScore'] = data['MonetaryScore'].astype(int)

data['RFM_Score'] = data['RecencyScore'] + data['FrequencyScore'] + data['MonetaryScore']

# Create RFM segments based on the RFM score
segment_labels = ['Low-Value', 'Mid-Value', 'High-Value']
data['Value Segment'] = pd.qcut(data['RFM_Score'], q=3, labels=segment_labels)

data.head(5)

"""# RFM Value Segment Distribution"""

segment_counts = data['Value Segment'].value_counts().reset_index()
segment_counts.columns = ['Value Segment', 'Count']

import plotly.express as px

fig_segment_dist = px.bar(segment_counts, x='Value Segment', y='Count',
                          color='Value Segment', color_discrete_sequence=px.colors.qualitative.Set1,
                          title='RFM Value Segment Distribution')

fig_segment_dist.show()
fig_segment_dist.update_layout(xaxis_title='RFM Value Segment',
                              yaxis_title='Count',
                              showlegend=False)

# Show the figure
fig_segment_dist.show()

data['RFM Customer Segments'] = ''

data.loc[data['RFM_Score'] >= 9, 'RFM Customer Segments'] = 'Champions'
data.loc[(data['RFM_Score'] >= 6) & (data['RFM_Score'] < 9), 'RFM Customer Segments'] = 'Potential Loyalists'
data.loc[(data['RFM_Score'] >= 5) & (data['RFM_Score'] < 6), 'RFM Customer Segments'] = 'At Risk Customers'
data.loc[(data['RFM_Score'] >= 4) & (data['RFM_Score'] < 5), 'RFM Customer Segments'] = "Can't Lose"
data.loc[(data['RFM_Score'] >= 3) & (data['RFM_Score'] < 4), 'RFM Customer Segments'] = "Lost"

print(data[['CustomerID', 'RFM Customer Segments']])

"""# RFM Customer Segments by Value"""

segment_product_counts = data.groupby(['Value Segment', 'RFM Customer Segments']).size().reset_index(name='Count')

segment_product_counts = segment_product_counts.sort_values('Count', ascending=False)

fig_treemap_segment_product = px.treemap(segment_product_counts,
                                         path=['Value Segment', 'RFM Customer Segments'],
                                         values='Count',
                                         color='Value Segment', color_discrete_sequence=px.colors.qualitative.Set1,
                                         title='RFM Customer Segments by Value')
fig_treemap_segment_product.show()

"""# Comparison of RFM Segments"""

import plotly.colors
import plotly.graph_objects as go

pastel_colors = plotly.colors.qualitative.Pastel

segment_counts = data['RFM Customer Segments'].value_counts()

comparison_fig = go.Figure(data=[go.Bar(x=segment_counts.index, y=segment_counts.values,
                                       marker=dict(color=pastel_colors))])

champions_color = 'rgb(144, 288, 144)'
comparison_fig.update_traces(marker_color=[champions_color if segment == 'Champions' else pastel_colors[i]
                                           for i, segment in enumerate(segment_counts.index)],
                             marker_line_color='rgb(0, 128, 0)',
                             marker_line_width=1.5, opacity=0.9)
comparison_fig.update_layout(title='Comparison of RFM Segments',
                             xaxis_title='RFM Segments',
                             yaxis_title='Number of Customers',
                             showlegend=False)

comparison_fig.show()

"""# Comparison of RFM Segments based on Recency, Frequency, and Monetary Scores"""

segment_scores = data.groupby('RFM Customer Segments')['RecencyScore', 'FrequencyScore', 'MonetaryScore'].mean().reset_index()


fig = go.Figure()


fig.add_trace(go.Bar(
    x=segment_scores['RFM Customer Segments'],
    y=segment_scores['RecencyScore'],
    name='Recency Score',
    marker_color='rgb(193, 255, 170)'
))

# Add bars for Frequency score
fig.add_trace(go.Bar(
    x=segment_scores['RFM Customer Segments'],
    y=segment_scores['FrequencyScore'],
    name='Frequency Score',
    marker_color='rgb(144, 288, 144)'
))

fig.add_trace(go.Bar(
    x=segment_scores['RFM Customer Segments'],
    y=segment_scores['MonetaryScore'],
    name='Monetary Score',
    marker_color='rgb(0, 128, 0)'
))

fig.update_layout(
    title='Comparison of RFM Segments based on Recency, Frequency, and Monetary Scores',
    xaxis_title='RFM Segments',
    yaxis_title='Score',
    barmode='group',
    showlegend=True
)

fig.show()

data.to_csv("analysis_results.csv", index=False)

!pip install dash

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.io as pio
import plotly.colors as pc

app = dash.Dash(__name__, external_stylesheets=['https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css'])


app.layout = html.Div(
    children=[
        html.H1("RFM Analysis Dashboard", className="text-center mb-4"),

        # Description of the app
        html.Div(
            "Analyze customer segments based on RFM scores.",
            className="text-center mb-4",
        ),


        dcc.Dropdown(
            id='chart-type-dropdown',
            options=[
                {'label': 'RFM Value Segment Distribution', 'value': 'segment_distribution'},
                {'label': 'Distribution of RFM Values within Customer Segment', 'value': 'RFM_distribution'},
                {'label': 'Comparison of RFM Segments', 'value': 'segment_comparison'},
                {'label': 'Comparison of RFM Segments based on Scores', 'value': 'segment_scores'},
            ],
            value='segment_distribution',
            className="mb-4",
        ),

        dcc.Graph(
            id='rfm-chart',
            className="mb-4",
            style={'borderRadius': '10px', 'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}
        ),


        html.Div(
            children=[
                html.Hr(),
                html.H5("Tips:"),
                html.Ul(
                    children=[
                        html.Li("Explore different charts and visualizations."),
                        html.Li("Use the dropdown to switch between analyses."),
                        html.Li("Check different segments and their distribution."),
                    ],
                ),
            ],
            className="mb-4",
        ),
    ],
    style={'backgroundColor': '#f2f2f2', 'padding': '20px'}
)


@app.callback(
    Output('rfm-chart', 'figure'),
    [Input('chart-type-dropdown', 'value')]
)
def update_chart(selected_chart_type):
    if selected_chart_type == 'segment_distribution':
        return fig_segment_dist
    elif selected_chart_type == 'RFM_distribution':
        return fig_treemap_segment_product
    elif selected_chart_type == 'segment_comparison':
        return comparison_fig
    elif selected_chart_type == 'segment_scores':
        return fig

    return fig_segment_dist

if __name__ == '__main__':
    app.run_server(port=8052, debug=True, use_reloader=False, dev_tools_ui=False)

